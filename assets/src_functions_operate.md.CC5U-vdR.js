import{_ as a,c as s,o as t,a3 as e}from"./chunks/framework.DVC_29Cd.js";const y=JSON.parse('{"title":"函数: operate()","description":"","frontmatter":{},"headers":[],"relativePath":"src/functions/operate.md","filePath":"src/functions/operate.md"}'),i={name:"src/functions/operate.md"},n=e(`<p><a href="./../README.html"><strong>onion-interceptor</strong></a> • <strong>Docs</strong></p><hr><h1 id="函数-operate" tabindex="-1">函数: operate() <a class="header-anchor" href="#函数-operate" aria-label="Permalink to &quot;函数: operate()&quot;">​</a></h1><blockquote><p><strong>operate</strong>(<code>fn</code>): <a href="./../interfaces/Opeartion.html"><code>Opeartion</code></a></p></blockquote><p>Generate Operator 函数用于创建一个操作符。</p><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>fn</code></td><td style="text-align:left;"><a href="./../interfaces/Middleware.html"><code>Middleware</code></a>&lt;<a href="./../type-aliases/Context.html"><code>Context</code></a>, <code>any</code>&gt;</td><td style="text-align:left;">要转换成操作符的中间件函数。</td></tr></tbody></table><h2 id="返回值类型" tabindex="-1">返回值类型 <a class="header-anchor" href="#返回值类型" aria-label="Permalink to &quot;返回值类型&quot;">​</a></h2><p><a href="./../interfaces/Opeartion.html"><code>Opeartion</code></a></p><p>转换后的操作符。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建操作符用于 一些快捷操作 如 catchError 等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myMiddleware</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Middleware</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do something</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myOperation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myMiddleware);</span></span></code></pre></div><h2 id="查看源码" tabindex="-1">查看源码 <a class="header-anchor" href="#查看源码" aria-label="Permalink to &quot;查看源码&quot;">​</a></h2><p><a href="https://github.com/coverjs/onion-interceptor/blob/f43adfbdf8838eec92e2fb81ebe66ae9f0e6ac40/packages/core/src/index.ts#L79" target="_blank" rel="noreferrer">index.ts:79</a></p>`,14),h=[n];function l(r,p,o,d,k,c){return t(),s("div",null,h)}const f=a(i,[["render",l]]);export{y as __pageData,f as default};
