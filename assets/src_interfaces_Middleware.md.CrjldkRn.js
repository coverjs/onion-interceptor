import{_ as e,c as t,o as a,a3 as d}from"./chunks/framework.DVC_29Cd.js";const g=JSON.parse('{"title":"接口: Middleware()<Ctx, Res>","description":"","frontmatter":{},"headers":[],"relativePath":"src/interfaces/Middleware.md","filePath":"src/interfaces/Middleware.md"}'),l={name:"src/interfaces/Middleware.md"},o=d('<p><a href="./../README.html"><strong>onion-interceptor</strong></a> • <strong>Docs</strong></p><hr><h1 id="接口-middleware-ctx-res" tabindex="-1">接口: Middleware()&lt;Ctx, Res&gt; <a class="header-anchor" href="#接口-middleware-ctx-res" aria-label="Permalink to &quot;接口: Middleware()\\&lt;Ctx, Res\\&gt;&quot;">​</a></h1><p>Middleware 类型定义了一个中间件函数的签名。 中间件函数接收一个上下文对象和一个 next 函数，并返回一个 Promise 对象。</p><h2 id="extended-by" tabindex="-1">Extended by <a class="header-anchor" href="#extended-by" aria-label="Permalink to &quot;Extended by&quot;">​</a></h2><ul><li><a href="./Opeartion.html"><code>Opeartion</code></a></li></ul><h2 id="类型参数" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数" aria-label="Permalink to &quot;类型参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">类型参数</th><th style="text-align:left;">Value</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Ctx</code></td><td style="text-align:left;"><a href="./Context.html"><code>Context</code></a></td><td style="text-align:left;">上下文对象的类型。</td></tr><tr><td style="text-align:left;"><code>Res</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">中间件函数返回类型。</td></tr></tbody></table><blockquote><p><strong>Middleware</strong>(<code>ctx</code>, <code>next</code>): <code>Promise</code>&lt;<code>Res</code>&gt;</p></blockquote><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ctx</code></td><td style="text-align:left;"><code>Ctx</code></td></tr><tr><td style="text-align:left;"><code>next</code></td><td style="text-align:left;"><a href="./Next.html"><code>Next</code></a>&lt;<code>any</code>&gt;</td></tr></tbody></table><h2 id="返回值类型" tabindex="-1">返回值类型 <a class="header-anchor" href="#返回值类型" aria-label="Permalink to &quot;返回值类型&quot;">​</a></h2><p><code>Promise</code>&lt;<code>Res</code>&gt;</p><h2 id="查看源码" tabindex="-1">查看源码 <a class="header-anchor" href="#查看源码" aria-label="Permalink to &quot;查看源码&quot;">​</a></h2><p><a href="https://github.com/coverjs/onion-interceptor/blob/df47dc5a644c957a9cf7323e463e0bf7d52a6e54/packages/core/src/types.ts#L186" target="_blank" rel="noreferrer">types.ts:186</a></p>',15),r=[o];function c(n,i,s,h,x,f){return a(),t("div",null,r)}const p=e(l,[["render",c]]);export{g as __pageData,p as default};
