import{_ as t,c as e,o as a,a3 as d}from"./chunks/framework.DVC_29Cd.js";const p=JSON.parse('{"title":"类型别名: Middleware()<Ctx, Res>","description":"","frontmatter":{},"headers":[],"relativePath":"autodocs/type-aliases/Middleware.md","filePath":"autodocs/type-aliases/Middleware.md"}'),o={name:"autodocs/type-aliases/Middleware.md"},l=d('<p><a href="./../README.html"><strong>onion-interceptor</strong></a> • <strong>Docs</strong></p><hr><h1 id="类型别名-middleware-ctx-res" tabindex="-1">类型别名: Middleware()&lt;Ctx, Res&gt; <a class="header-anchor" href="#类型别名-middleware-ctx-res" aria-label="Permalink to &quot;类型别名: Middleware()\\&lt;Ctx, Res\\&gt;&quot;">​</a></h1><blockquote><p><strong>Middleware</strong>&lt;<code>Ctx</code>, <code>Res</code>&gt;: (<code>ctx</code>, <code>next</code>) =&gt; <code>Promise</code>&lt;<code>void</code> | <code>Res</code>&gt;</p></blockquote><p>Middleware 类型定义了一个中间件函数的签名。 中间件函数接收一个上下文对象和一个 next 函数，并返回一个 Promise 对象。</p><h2 id="类型参数" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数" aria-label="Permalink to &quot;类型参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">类型参数</th><th style="text-align:left;">Value</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Ctx</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">上下文对象的类型。</td></tr><tr><td style="text-align:left;"><code>Res</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ctx</code></td><td style="text-align:left;"><code>Ctx</code></td></tr><tr><td style="text-align:left;"><code>next</code></td><td style="text-align:left;"><a href="./Next.html"><code>Next</code></a></td></tr></tbody></table><h2 id="返回值类型" tabindex="-1">返回值类型 <a class="header-anchor" href="#返回值类型" aria-label="Permalink to &quot;返回值类型&quot;">​</a></h2><p><code>Promise</code>&lt;<code>void</code> | <code>Res</code>&gt;</p><h2 id="查看源码" tabindex="-1">查看源码 <a class="header-anchor" href="#查看源码" aria-label="Permalink to &quot;查看源码&quot;">​</a></h2><p><a href="https://github.com/coverjs/onion-interceptor/blob/d9442ccfd97eaff0832faec07c8e2be488e1ba7c/packages/core/src/types.ts#L8" target="_blank" rel="noreferrer">types.ts:8</a></p>',13),r=[l];function c(s,i,n,h,x,f){return a(),e("div",null,r)}const b=t(o,[["render",c]]);export{p as __pageData,b as default};
