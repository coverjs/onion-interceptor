import{_ as s,c as a,o as i,a3 as t}from"./chunks/framework.DVC_29Cd.js";const g=JSON.parse('{"title":"类: OnionInterceptor<Ctx>","description":"","frontmatter":{},"headers":[],"relativePath":"src/classes/OnionInterceptor.md","filePath":"src/classes/OnionInterceptor.md"}'),e={name:"src/classes/OnionInterceptor.md"},n=t(`<p><a href="./../README.html"><strong>onion-interceptor</strong></a> • <strong>Docs</strong></p><hr><h1 id="类-onioninterceptor-ctx" tabindex="-1">类: OnionInterceptor&lt;Ctx&gt; <a class="header-anchor" href="#类-onioninterceptor-ctx" aria-label="Permalink to &quot;类: OnionInterceptor\\&lt;Ctx\\&gt;&quot;">​</a></h1><p>OnionInterceptor 类创建一个洋葱模型拦截器。 拦截器可以用于拦截和修改 HTTP 请求和响应。</p><h2 id="param" tabindex="-1">Param <a class="header-anchor" href="#param" aria-label="Permalink to &quot;Param&quot;">​</a></h2><p>(可选) Axios 实例。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  baseURL: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.github.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> interceptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnionInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(http);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">interceptor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在这里可以修改请求配置或执行其他操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="类型参数" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数" aria-label="Permalink to &quot;类型参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">类型参数</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Ctx</code></td><td style="text-align:left;"><code>any</code></td></tr></tbody></table><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="new-onioninterceptor" tabindex="-1">new OnionInterceptor() <a class="header-anchor" href="#new-onioninterceptor" aria-label="Permalink to &quot;new OnionInterceptor()&quot;">​</a></h3><blockquote><p><strong>new OnionInterceptor</strong>&lt;<code>Ctx</code>&gt;(<code>instance</code>?): <a href="./OnionInterceptor.html"><code>OnionInterceptor</code></a>&lt;<code>Ctx</code>&gt;</p></blockquote><p>构造函数</p><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>instance</code>?</td><td style="text-align:left;"><code>AxiosInstanceLike</code></td><td style="text-align:left;">axios实例(可选)</td></tr></tbody></table><h4 id="返回值类型" tabindex="-1">返回值类型 <a class="header-anchor" href="#返回值类型" aria-label="Permalink to &quot;返回值类型&quot;">​</a></h4><p><a href="./OnionInterceptor.html"><code>OnionInterceptor</code></a>&lt;<code>Ctx</code>&gt;</p><h4 id="查看源码" tabindex="-1">查看源码 <a class="header-anchor" href="#查看源码" aria-label="Permalink to &quot;查看源码&quot;">​</a></h4><p><a href="https://github.com/coverjs/onion-interceptor/blob/d9442ccfd97eaff0832faec07c8e2be488e1ba7c/packages/core/src/index.ts#L230" target="_blank" rel="noreferrer">index.ts:230</a></p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="handle" tabindex="-1">handle() <a class="header-anchor" href="#handle" aria-label="Permalink to &quot;handle()&quot;">​</a></h3><blockquote><p><strong>handle</strong>(<code>ctx</code>, <code>coreFn</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>handle 方法用于使用洋葱拦截器拦截目标函数(是的通用性大幅提高)。</p><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ctx</code></td><td style="text-align:left;"><code>Ctx</code></td><td style="text-align:left;">上下文对象。</td></tr><tr><td style="text-align:left;"><code>coreFn</code></td><td style="text-align:left;"><code>Function</code></td><td style="text-align:left;">核心函数。</td></tr></tbody></table><h4 id="返回值类型-1" tabindex="-1">返回值类型 <a class="header-anchor" href="#返回值类型-1" aria-label="Permalink to &quot;返回值类型&quot;">​</a></h4><p><code>Promise</code>&lt;<code>void</code>&gt;</p><p>一个 Promise，代表拦截处理的结果。</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当构造函数为传入参数，可以使用 handle 方法进行拦截处理。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">interceptor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 执行核心逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.someData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;some data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="查看源码-1" tabindex="-1">查看源码 <a class="header-anchor" href="#查看源码-1" aria-label="Permalink to &quot;查看源码&quot;">​</a></h4><p><a href="https://github.com/coverjs/onion-interceptor/blob/d9442ccfd97eaff0832faec07c8e2be488e1ba7c/packages/core/src/index.ts#L298" target="_blank" rel="noreferrer">index.ts:298</a></p><hr><h3 id="use" tabindex="-1">use() <a class="header-anchor" href="#use" aria-label="Permalink to &quot;use()&quot;">​</a></h3><blockquote><p><strong>use</strong>(...<code>args</code>): <a href="./OnionInterceptor.html"><code>OnionInterceptor</code></a>&lt;<code>Ctx</code>&gt;</p></blockquote><p>use 方法用于添加中间件到拦截器实例。</p><h4 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;">...<code>args</code></td><td style="text-align:left;">(<a href="./../type-aliases/Middleware.html"><code>Middleware</code></a>&lt;<code>Ctx</code>&gt; | <a href="./../interfaces/MiddlewareKlassConstructor.html"><code>MiddlewareKlassConstructor</code></a>&lt;<code>Ctx</code>&gt;)[]</td></tr></tbody></table><h4 id="返回值类型-2" tabindex="-1">返回值类型 <a class="header-anchor" href="#返回值类型-2" aria-label="Permalink to &quot;返回值类型&quot;">​</a></h4><p><a href="./OnionInterceptor.html"><code>OnionInterceptor</code></a>&lt;<code>Ctx</code>&gt;</p><p>当前拦截器实例。</p><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> intercept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加认证逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async funciont </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadingMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx: any, next: Next) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // loading start</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // loading end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">interceptor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loadingMiddlewre, AuthMiddleware);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or interceptor.use(loadingMiddlewre).use(AuthMiddleware);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or interceptor.use(loadingMiddlewre); interceptor.use(AuthMiddleware);</span></span></code></pre></div><h4 id="查看源码-2" tabindex="-1">查看源码 <a class="header-anchor" href="#查看源码-2" aria-label="Permalink to &quot;查看源码&quot;">​</a></h4><p><a href="https://github.com/coverjs/onion-interceptor/blob/d9442ccfd97eaff0832faec07c8e2be488e1ba7c/packages/core/src/index.ts#L270" target="_blank" rel="noreferrer">index.ts:270</a></p>`,46),l=[n];function h(p,r,k,d,o,c){return i(),a("div",null,l)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
